) %>%
ungroup()
# Génération du graphique
p <- ggplot(data_long, aes(x = Ville_eval, y = Valeur, fill = Ville_eval)) +
facet_wrap(~Variable, scales = "free_y", ncol = 3) +
geom_boxplot(alpha = 0.7, outlier.size = 0.5) +
stat_pvalue_manual(
data = comparaisons,
label = "p.signif",
y.position = "y.position",
xmin = "group1",
xmax = "group2",
tip.length = 0.01,
bracket.size = 0.6,
inherit.aes = FALSE
) +
scale_fill_manual(values = c(
"Lima (150m)" = "#1b9e77",
"Cusco (3400m)" = "#d95f02",
"Juliaca (3800m)" = "#7570b3",
"La Rinconada (5100m)" = "#e7298a"
)) +
labs(
title = paste("Comparaison des distributions par ville (", categorie_age, ")"),
x = "Ville",
y = "Valeur",
fill = "Ville"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
data = read.csv("dataclean/7.csv")
names(data)
RET_NRBC = c("RET..106.µL.", "RET....", "NRBC..103.µL.", "NRBC....", "IRF....", "LFR....", "MFR....", "HFR....", "Ret.HE..pg.")
data = read.csv("dataclean/7.csv")
names(data)
mes_vars <- c("HCT....", "Hb.mass..g.", "Hb.mass.kg..g...kg.", "Hb.mass.kg..g...kg.2",
"Hb.NFS", "X.Hb...g.L..ABL.80")
# === CHARGEMENT ET FILTRAGE ===
data <- read.csv("data.csv")
data$Ville_eval <- factor(data$Ville_eval, levels = c("Lima (150m)", "Cusco (3400m)", "Juliaca (3800m)", "La Rinconada (5100m)"))
# === LONG FORMAT ===
data_long <- data %>%
select(all_of(mes_vars), Ville_eval) %>%
pivot_longer(cols = all_of(mes_vars), names_to = "Variable", values_to = "Valeur")
# === TESTS GLOBAUX ===
# === TESTS GLOBAUX ===
global_tests <- data_long %>%
split(.$Variable) %>%
map_df(function(df) {
variable <- unique(df$Variable)
# Nombre de groupes avec au moins une valeur non manquante
n_groupes_valides <- df %>%
group_by(Ville_eval) %>%
summarise(n = sum(!is.na(Valeur)), .groups = "drop") %>%
filter(n > 0) %>%
nrow()
# Si < 2 groupes valides, on ne peut pas tester → NA
if (n_groupes_valides < 2) {
return(tibble(Variable = variable, p_global = NA_real_))
}
# Sinon, on continue
effectifs_ok <- df %>%
group_by(Ville_eval) %>%
summarise(n = sum(!is.na(Valeur)), .groups = "drop") %>%
summarise(all(n > 30)) %>%
pull()
bartlett_ok <- tryCatch({
bartlett.test(Valeur ~ Ville_eval, data = df)$p.value > 0.05
}, error = function(e) FALSE)
pval <- if (isTRUE(effectifs_ok) && bartlett_ok) {
anova_test(data = df, dv = Valeur, between = Ville_eval)$p
} else {
tryCatch({
kruskal_test(data = df, formula = Valeur ~ Ville_eval)$p
}, error = function(e) NA_real_)
}
tibble(Variable = variable, p_global = pval)
})
comparaisons <- data_long %>%
group_split(Variable) %>%
map_df(function(df) {
variable <- unique(df$Variable)
# Vérifier qu’il y a au moins deux groupes avec au moins deux valeurs
groupes_valides <- df %>%
group_by(Ville_eval) %>%
summarise(n = sum(!is.na(Valeur)), .groups = "drop") %>%
filter(n >= 2) %>%
nrow()
if (groupes_valides < 2) {
return(NULL)
}
# Essayer les tests post-hoc
res <- tryCatch({
df %>%
pairwise_wilcox_test(
Valeur ~ Ville_eval,
p.adjust.method = "BH"
) %>%
filter(p.adj < 0.1) %>%
mutate(
Variable = variable,
p.signif = case_when(
p.adj < 0.01 ~ "***",
p.adj < 0.05 ~ "**",
p.adj < 0.1  ~ "*",
TRUE         ~ "ns"
)
)
}, error = function(e) {
NULL  # ignorer la variable si erreur
})
return(res)
})
# === POSITIONS DES P-VALUES ===
positions_max <- data_long %>%
group_by(Variable) %>%
summarise(base_y = max(Valeur, na.rm = TRUE), .groups = "drop")
comparaisons <- comparaisons %>%
left_join(positions_max, by = "Variable") %>%
group_by(Variable) %>%
mutate(
y.position = base_y + 0.1 * base_y + 0.05 * base_y * row_number()
) %>%
ungroup()
ggplot(data_long, aes(x = Ville_eval, y = Valeur, fill = Ville_eval)) +
facet_wrap(~Variable, scales = "free_y", ncol = 3) +
geom_boxplot(alpha = 0.7, outlier.size = 0.5) +
stat_pvalue_manual(
data = comparaisons,
label = "p.signif",
y.position = "y.position",
xmin = "group1",
xmax = "group2",
tip.length = 0.01,
bracket.size = 0.6,
inherit.aes = FALSE
) +
scale_fill_manual(values = c(
"Lima (150m)" = "#1b9e77",
"Cusco (3400m)" = "#d95f02",
"Juliaca (3800m)" = "#7570b3",
"La Rinconada (5100m)" = "#e7298a"
)) +
labs(
title = "Comparaison des distributions par ville",
x = "Ville",
y = "Valeur",
fill = "Ville"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# === Variables à tracer ===
mes_vars <- c("HCT....", "Hb.mass..g.", "Hb.mass.kg..g...kg.", "Hb.mass.kg..g...kg.2",
"Hb.NFS", "X.Hb...g.L..ABL.80")
# === Catégories d'âge à boucler ===
ages <- c("0-3 ans", "8-12 ans")
# === Chargement de la base ===
data_all <- read.csv("data.csv")
data_all$Ville_eval <- factor(data_all$Ville_eval,
levels = c("Lima (150m)", "Cusco (3400m)", "Juliaca (3800m)", "La Rinconada (5100m)")
)
# === Boucle sur les tranches d’âge ===
for (categorie_age in ages) {
message("Traitement : ", categorie_age)
# Filtrage
data <- data_all %>% filter(Age_categorie_binaire == categorie_age)
# Long format
data_long <- data %>%
select(all_of(mes_vars), Ville_eval) %>%
pivot_longer(cols = all_of(mes_vars), names_to = "Variable", values_to = "Valeur")
# Tests post-hoc robustes
comparaisons <- data_long %>%
group_split(Variable) %>%
map_df(function(df) {
variable <- unique(df$Variable)
groupes_valides <- df %>%
group_by(Ville_eval) %>%
summarise(n = sum(!is.na(Valeur)), .groups = "drop") %>%
filter(n >= 2) %>%
nrow()
if (groupes_valides < 2) return(NULL)
tryCatch({
df %>%
pairwise_wilcox_test(
Valeur ~ Ville_eval,
p.adjust.method = "BH"
) %>%
filter(p.adj < 0.1) %>%
mutate(
Variable = variable,
p.signif = case_when(
p.adj < 0.01 ~ "***",
p.adj < 0.05 ~ "**",
p.adj < 0.1  ~ "*"
)
)
}, error = function(e) NULL)
})
# Position des p-values
positions_max <- data_long %>%
group_by(Variable) %>%
summarise(base_y = max(Valeur, na.rm = TRUE), .groups = "drop")
comparaisons <- comparaisons %>%
left_join(positions_max, by = "Variable") %>%
group_by(Variable) %>%
mutate(
y.position = base_y + 0.1 * base_y + 0.05 * base_y * row_number()
) %>%
ungroup()
# Génération du graphique
p <- ggplot(data_long, aes(x = Ville_eval, y = Valeur, fill = Ville_eval)) +
facet_wrap(~Variable, scales = "free_y", ncol = 3) +
geom_boxplot(alpha = 0.7, outlier.size = 0.5) +
stat_pvalue_manual(
data = comparaisons,
label = "p.signif",
y.position = "y.position",
xmin = "group1",
xmax = "group2",
tip.length = 0.01,
bracket.size = 0.6,
inherit.aes = FALSE
) +
scale_fill_manual(values = c(
"Lima (150m)" = "#1b9e77",
"Cusco (3400m)" = "#d95f02",
"Juliaca (3800m)" = "#7570b3",
"La Rinconada (5100m)" = "#e7298a"
)) +
labs(
title = paste("Comparaison des distributions par ville (", categorie_age, ")"),
x = "Ville",
y = "Valeur",
fill = "Ville"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
# === Variables à tracer ===
mes_vars <- c("RBCV..ml.", "PV.ml.", "BV..ml.",
"PV..kg..ml.kg.", "BV..kg..ml.kg.")
# === Catégories d'âge à boucler ===
ages <- c("0-3 ans", "8-12 ans")
# === Chargement de la base ===
data_all <- read.csv("data.csv")
data_all$Ville_eval <- factor(data_all$Ville_eval,
levels = c("Lima (150m)", "Cusco (3400m)", "Juliaca (3800m)", "La Rinconada (5100m)")
)
# === Boucle sur les tranches d’âge ===
for (categorie_age in ages) {
message("Traitement : ", categorie_age)
# Filtrage
data <- data_all %>% filter(Age_categorie_binaire == categorie_age)
# Long format
data_long <- data %>%
select(all_of(mes_vars), Ville_eval) %>%
pivot_longer(cols = all_of(mes_vars), names_to = "Variable", values_to = "Valeur")
# Tests post-hoc robustes
comparaisons <- data_long %>%
group_split(Variable) %>%
map_df(function(df) {
variable <- unique(df$Variable)
groupes_valides <- df %>%
group_by(Ville_eval) %>%
summarise(n = sum(!is.na(Valeur)), .groups = "drop") %>%
filter(n >= 2) %>%
nrow()
if (groupes_valides < 2) return(NULL)
tryCatch({
df %>%
pairwise_wilcox_test(
Valeur ~ Ville_eval,
p.adjust.method = "BH"
) %>%
filter(p.adj < 0.1) %>%
mutate(
Variable = variable,
p.signif = case_when(
p.adj < 0.01 ~ "***",
p.adj < 0.05 ~ "**",
p.adj < 0.1  ~ "*"
)
)
}, error = function(e) NULL)
})
# Position des p-values
positions_max <- data_long %>%
group_by(Variable) %>%
summarise(base_y = max(Valeur, na.rm = TRUE), .groups = "drop")
comparaisons <- comparaisons %>%
left_join(positions_max, by = "Variable") %>%
group_by(Variable) %>%
mutate(
y.position = base_y + 0.1 * base_y + 0.05 * base_y * row_number()
) %>%
ungroup()
# Génération du graphique
p <- ggplot(data_long, aes(x = Ville_eval, y = Valeur, fill = Ville_eval)) +
facet_wrap(~Variable, scales = "free_y", ncol = 3) +
geom_boxplot(alpha = 0.7, outlier.size = 0.5) +
stat_pvalue_manual(
data = comparaisons,
label = "p.signif",
y.position = "y.position",
xmin = "group1",
xmax = "group2",
tip.length = 0.01,
bracket.size = 0.6,
inherit.aes = FALSE
) +
scale_fill_manual(values = c(
"Lima (150m)" = "#1b9e77",
"Cusco (3400m)" = "#d95f02",
"Juliaca (3800m)" = "#7570b3",
"La Rinconada (5100m)" = "#e7298a"
)) +
labs(
title = paste("Comparaison des distributions par ville (", categorie_age, ")"),
x = "Ville",
y = "Valeur",
fill = "Ville"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
# === Variables à tracer ===
mes_vars <- c("RBCV..ml.", "PV.ml.", "BV..ml.",
"PV..kg..ml.kg.", "BV..kg..ml.kg.")
# === Catégories d'âge à boucler ===
ages <- c("8-12 ans")
# === Chargement de la base ===
data_all <- read.csv("data.csv")
data_all$Ville_eval <- factor(data_all$Ville_eval,
levels = c("Lima (150m)", "Cusco (3400m)", "Juliaca (3800m)", "La Rinconada (5100m)")
)
# === Boucle sur les tranches d’âge ===
for (categorie_age in ages) {
message("Traitement : ", categorie_age)
# Filtrage
data <- data_all %>% filter(Age_categorie_binaire == categorie_age)
# Long format
data_long <- data %>%
select(all_of(mes_vars), Ville_eval) %>%
pivot_longer(cols = all_of(mes_vars), names_to = "Variable", values_to = "Valeur")
# Tests post-hoc robustes
comparaisons <- data_long %>%
group_split(Variable) %>%
map_df(function(df) {
variable <- unique(df$Variable)
groupes_valides <- df %>%
group_by(Ville_eval) %>%
summarise(n = sum(!is.na(Valeur)), .groups = "drop") %>%
filter(n >= 2) %>%
nrow()
if (groupes_valides < 2) return(NULL)
tryCatch({
df %>%
pairwise_wilcox_test(
Valeur ~ Ville_eval,
p.adjust.method = "BH"
) %>%
filter(p.adj < 0.1) %>%
mutate(
Variable = variable,
p.signif = case_when(
p.adj < 0.01 ~ "***",
p.adj < 0.05 ~ "**",
p.adj < 0.1  ~ "*"
)
)
}, error = function(e) NULL)
})
# Position des p-values
positions_max <- data_long %>%
group_by(Variable) %>%
summarise(base_y = max(Valeur, na.rm = TRUE), .groups = "drop")
comparaisons <- comparaisons %>%
left_join(positions_max, by = "Variable") %>%
group_by(Variable) %>%
mutate(
y.position = base_y + 0.1 * base_y + 0.05 * base_y * row_number()
) %>%
ungroup()
# Génération du graphique
p <- ggplot(data_long, aes(x = Ville_eval, y = Valeur, fill = Ville_eval)) +
facet_wrap(~Variable, scales = "free_y", ncol = 3) +
geom_boxplot(alpha = 0.7, outlier.size = 0.5) +
stat_pvalue_manual(
data = comparaisons,
label = "p.signif",
y.position = "y.position",
xmin = "group1",
xmax = "group2",
tip.length = 0.01,
bracket.size = 0.6,
inherit.aes = FALSE
) +
scale_fill_manual(values = c(
"Lima (150m)" = "#1b9e77",
"Cusco (3400m)" = "#d95f02",
"Juliaca (3800m)" = "#7570b3",
"La Rinconada (5100m)" = "#e7298a"
)) +
labs(
title = paste("Comparaison des distributions par ville (", categorie_age, ")"),
x = "Ville",
y = "Valeur",
fill = "Ville"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
# === Variables à tracer ===
mes_vars <- c("PV.ml.")
# === Catégories d'âge à boucler ===
ages <- c("0-3 ans")
# === Chargement de la base ===
data_all <- read.csv("data.csv")
data_all$Ville_eval <- factor(data_all$Ville_eval,
levels = c("Lima (150m)", "Cusco (3400m)", "Juliaca (3800m)", "La Rinconada (5100m)")
)
# === Boucle sur les tranches d’âge ===
for (categorie_age in ages) {
message("Traitement : ", categorie_age)
# Filtrage
data <- data_all %>% filter(Age_categorie_binaire == categorie_age)
# Long format
data_long <- data %>%
select(all_of(mes_vars), Ville_eval) %>%
pivot_longer(cols = all_of(mes_vars), names_to = "Variable", values_to = "Valeur")
# Tests post-hoc robustes
comparaisons <- data_long %>%
group_split(Variable) %>%
map_df(function(df) {
variable <- unique(df$Variable)
groupes_valides <- df %>%
group_by(Ville_eval) %>%
summarise(n = sum(!is.na(Valeur)), .groups = "drop") %>%
filter(n >= 2) %>%
nrow()
if (groupes_valides < 2) return(NULL)
tryCatch({
df %>%
pairwise_wilcox_test(
Valeur ~ Ville_eval,
p.adjust.method = "BH"
) %>%
filter(p.adj < 0.1) %>%
mutate(
Variable = variable,
p.signif = case_when(
p.adj < 0.01 ~ "***",
p.adj < 0.05 ~ "**",
p.adj < 0.1  ~ "*"
)
)
}, error = function(e) NULL)
})
# Position des p-values
positions_max <- data_long %>%
group_by(Variable) %>%
summarise(base_y = max(Valeur, na.rm = TRUE), .groups = "drop")
comparaisons <- comparaisons %>%
left_join(positions_max, by = "Variable") %>%
group_by(Variable) %>%
mutate(
y.position = base_y + 0.1 * base_y + 0.05 * base_y * row_number()
) %>%
ungroup()
# Génération du graphique
p <- ggplot(data_long, aes(x = Ville_eval, y = Valeur, fill = Ville_eval)) +
facet_wrap(~Variable, scales = "free_y", ncol = 3) +
geom_boxplot(alpha = 0.7, outlier.size = 0.5) +
stat_pvalue_manual(
data = comparaisons,
label = "p.signif",
y.position = "y.position",
xmin = "group1",
xmax = "group2",
tip.length = 0.01,
bracket.size = 0.6,
inherit.aes = FALSE
) +
scale_fill_manual(values = c(
"Lima (150m)" = "#1b9e77",
"Cusco (3400m)" = "#d95f02",
"Juliaca (3800m)" = "#7570b3",
"La Rinconada (5100m)" = "#e7298a"
)) +
labs(
title = paste("Comparaison des distributions par ville (", categorie_age, ")"),
x = "Ville",
y = "Valeur",
fill = "Ville"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
data = read.csv("data.cs")
data = read.csv("data.csv")
View(data)
data = data %>% select(!is.numeric(data))
data = data[!is.numeric(data),]
data <- data[, sapply(data, !is.numeric)]
data <- data[, !sapply(data, is.numeric)]
View(data)
