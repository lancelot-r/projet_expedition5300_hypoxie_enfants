for (ville in villes) {
col_logo <- paste0(ville, "_logo")
if (col_logo %in% colnames(final_table)) {
final_table[[ville]] <- paste0(final_table[[ville]], " ", final_table[[col_logo]])
}
}
# Supprimer les colonnes *_logo
final_table <- final_table %>%
select(-ends_with("_logo"))
final_table %>%
arrange(variable) %>%
gt() %>%
tab_header(title = "Tableau récapitulatif par site") %>%
cols_label(variable = "Variable") %>%
opt_all_caps()
par(mfrow = c(1, 2))
f1 = ggplot(data_3ans, aes(x = Age_mois, fill = Ville_eval)) +
geom_density(alpha = 0.5) +
labs(title = "Age-Ville 3ans",
x = "Valeurs",
y = "Densité") +
theme_minimal()
f2 = ggplot(data_12ans, aes(x = Age_mois, fill = Ville_eval)) +
geom_density(alpha = 0.5) +
labs(title = "Age-Ville 12ans",
x = "Valeurs",
y = "Densité") +
theme_minimal()
f1 + f2
seuils <- data %>%
filter(!is.na(Categorie_age_OMS)) %>%
group_by(Ville_eval, Categorie_age_OMS) %>%
summarise(
seuil_q10 = quantile(HB, na.rm = TRUE, probs = 0.1),
seuil_q90 = quantile(HB, na.rm = TRUE, probs = 0.9),
seuil_q10_K = quantile(Hb.mass.kg..g...kg., na.rm = TRUE, probs = 0.1),
seuil_q90_K = quantile(Hb.mass.kg..g...kg., na.rm = TRUE, probs = 0.9),
.groups = "drop"
)
data <- data %>%
left_join(seuils, by = c("Ville_eval", "Categorie_age_OMS")) %>%
mutate(
Anemie_Q10 = case_when(
HB < seuil_q10 ~ "oui",
HB >= seuil_q10 ~ "non",
TRUE ~ ""
),
Polyglobulie_Q90 = case_when(
HB > seuil_q90 ~ "oui",
HB <= seuil_q90 ~ "non",
TRUE ~ ""
),
Anemie_Q10_Hbmass = case_when(
Hb.mass.kg..g...kg. < seuil_q10_K ~ "oui",
Hb.mass.kg..g...kg. > seuil_q10_K ~ "non",
TRUE ~ ""
),
Polyglobulie_Q90_Hbmass = case_when(
Hb.mass.kg..g...kg. > seuil_q90_K ~ "oui",
Hb.mass.kg..g...kg. <= seuil_q90_K ~ "non",
TRUE ~ ""
)
)
seuils <- data %>%
filter(!is.na(Categorie_age_OMS)) %>%
group_by(Ville_eval, Categorie_age_OMS) %>%
summarise(
seuil_q10 = quantile(HB, na.rm = TRUE, probs = 0.1),
seuil_q90 = quantile(HB, na.rm = TRUE, probs = 0.9),
seuil_q10_K = quantile(Hb.mass.kg..g...kg., na.rm = TRUE, probs = 0.1),
seuil_q90_K = quantile(Hb.mass.kg..g...kg., na.rm = TRUE, probs = 0.9),
.groups = "drop"
)
data <- data %>%
left_join(seuils, by = c("Ville_eval", "Categorie_age_OMS")) %>%
mutate(
Anemie_Q10 = case_when(
HB < seuil_q10 ~ "oui",
HB >= seuil_q10 ~ "non",
TRUE ~ ""
),
Polyglobulie_Q90 = case_when(
HB > seuil_q90 ~ "oui",
HB <= seuil_q90 ~ "non",
TRUE ~ ""
),
Anemie_Q10_Hbmass = case_when(
Hb.mass.kg..g...kg. < seuil_q10_K ~ "oui",
Hb.mass.kg..g...kg. > seuil_q10_K ~ "non",
TRUE ~ ""
),
Polyglobulie_Q90_Hbmass = case_when(
Hb.mass.kg..g...kg. > seuil_q90_K ~ "oui",
Hb.mass.kg..g...kg. <= seuil_q90_K ~ "non",
TRUE ~ ""
)
)
library(dplyr)
library(tidyr)
library(modelsummary)
library(glue)
library(gt)
library(car)
library(dunn.test)
library(rcompanion)
library(rstatix)
library(purrr)
library(ggplot2)
library(patchwork)
library(psych)
library(performance)
library(lmtest)
library(readxl)
library(openxlsx)
library(pheatmap)
data <- read.csv("data/data.csv")
data <- data[ , -1]
data <- data %>%
mutate(Altitude = case_when(
Ville_eval == "Cusco (3400m)" ~ "3400m",
Ville_eval == "Juliaca (3800m)" ~ "3800m",
Ville_eval == "La Rinconada (5100m-5300m)" ~ "5100m-5300m",
Ville_eval == "Lima (150m)" ~ "150m"
))
data <- data %>%
mutate(Ville_eval = case_when(
Ville_eval == "Cusco (3400m)" ~ "Cusco",
Ville_eval == "Juliaca (3800m)" ~ "Juliaca",
Ville_eval == "La Rinconada (5100m-5300m)" ~ "Rinconada",
Ville_eval == "Lima (150m)" ~ "Lima"
))
data$Sexe_F_Fille_G_Garçon = as.factor(data$Sexe_F_Fille_G_Garçon)
data$Hb.mass.kg..g...kg.2 = as.numeric(data$Hb.mass.kg..g...kg.2)
data$PV..kg..ml.kg. = as.numeric(data$PV..kg..ml.kg.)
data$BV..kg..ml.kg. = as.numeric(data$BV..kg..ml.kg.)
data_3ans <- data[data$Age_categorie_binaire == "0-3 ans", ]
data_3ans <- data_3ans[ , -8]
data_12ans <- data[data$Age_categorie_binaire == "8-12 ans", ]
data_12ans <- data_12ans[ , -8]
seuils <- data %>%
filter(!is.na(Categorie_age_OMS)) %>%
group_by(Ville_eval, Categorie_age_OMS) %>%
summarise(
seuil_q10 = quantile(HB, na.rm = TRUE, probs = 0.1),
seuil_q90 = quantile(HB, na.rm = TRUE, probs = 0.9),
seuil_q10_K = quantile(Hb.mass.kg..g...kg., na.rm = TRUE, probs = 0.1),
seuil_q90_K = quantile(Hb.mass.kg..g...kg., na.rm = TRUE, probs = 0.9),
.groups = "drop"
)
data <- data %>%
left_join(seuils, by = c("Ville_eval", "Categorie_age_OMS")) %>%
mutate(
Anemie_Q10 = case_when(
HB < seuil_q10 ~ "oui",
HB >= seuil_q10 ~ "non",
TRUE ~ ""
),
Polyglobulie_Q90 = case_when(
HB > seuil_q90 ~ "oui",
HB <= seuil_q90 ~ "non",
TRUE ~ ""
),
Anemie_Q10_Hbmass = case_when(
Hb.mass.kg..g...kg. < seuil_q10_K ~ "oui",
Hb.mass.kg..g...kg. > seuil_q10_K ~ "non",
TRUE ~ ""
),
Polyglobulie_Q90_Hbmass = case_when(
Hb.mass.kg..g...kg. > seuil_q90_K ~ "oui",
Hb.mass.kg..g...kg. <= seuil_q90_K ~ "non",
TRUE ~ ""
)
)
cohen1 <- cohen.kappa(data_3ans[,c("Anemie_OMS2011", "Anemie_OMS2024", "Anemie_SD", "Anemie_2SD", "Anemie_Q10")])
cohen1 <- cohen.kappa(data_3ans[,c("Anemie_OMS2011", "Anemie_OMS2024", "Anemie_SD", "Anemie_2SD", "Anemie_Q10")])
View(data_3ans)
data_3ans <- data[data$Age_categorie_binaire == "0-3 ans", ]
data_3ans <- data_3ans[ , -8]
data_12ans <- data[data$Age_categorie_binaire == "8-12 ans", ]
data_12ans <- data_12ans[ , -8]
cohen1 <- cohen.kappa(data_3ans[,c("Anemie_OMS2011", "Anemie_OMS2024", "Anemie_SD", "Anemie_2SD", "Anemie_Q10")])
cohen2 <- cohen.kappa(data_3ans[,c("Polyglobulie_14.5_OMS2011", "Polyglobulie_14.5_OMS2024", "Polyglobulie_SD", "Polyglobulie_2SD", "Polyglobulie_Q90")])
cohen3 <- cohen.kappa(data_12ans[,c("Anemie_OMS2011", "Anemie_OMS2024", "Anemie_SD", "Anemie_2SD", "Anemie_Q10", "Anemie_SD_Hbmass_kg", "Anemie_2SD_Hbmass_kg", "Anemie_Q10_Hbmass")])
cohen4 <- cohen.kappa(data_12ans[,c("Polyglobulie_14.5_OMS2011", "Polyglobulie_14.5_OMS2024", "Polyglobulie_SD", "Polyglobulie_2SD", "Polyglobulie_Q90", "Polyglobulie_SD_Hbmass_kg", "Polyglobulie_2SD_Hbmass_kg", "Polyglobulie_Q90_Hbmass")])
pheatmap(cohen1$cohen.kappa, display_numbers = T)
data = read.csv("data/datafinal.csv")
data_3ans <- data[data$Age_categorie_binaire == "0-3 ans", ]
data_3ans <- data_3ans[ , -8]
data_12ans <- data[data$Age_categorie_binaire == "8-12 ans", ]
data_12ans <- data_12ans[ , -8]
cohen1 <- cohen.kappa(data_3ans[,c("Anemie_OMS2011", "Anemie_OMS2024", "Anemie_SD", "Anemie_2SD", "Anemie_Q10")])
cohen2 <- cohen.kappa(data_3ans[,c("Polyglobulie_14.5_OMS2011", "Polyglobulie_14.5_OMS2024", "Polyglobulie_SD", "Polyglobulie_2SD", "Polyglobulie_Q90")])
cohen3 <- cohen.kappa(data_12ans[,c("Anemie_OMS2011", "Anemie_OMS2024", "Anemie_SD", "Anemie_2SD", "Anemie_Q10", "Anemie_SD_Hbmass_kg", "Anemie_2SD_Hbmass_kg", "Anemie_Q10_Hbmass")])
cohen4 <- cohen.kappa(data_12ans[,c("Polyglobulie_14.5_OMS2011", "Polyglobulie_14.5_OMS2024", "Polyglobulie_SD", "Polyglobulie_2SD", "Polyglobulie_Q90", "Polyglobulie_SD_Hbmass_kg", "Polyglobulie_2SD_Hbmass_kg", "Polyglobulie_Q90_Hbmass")])
pheatmap(cohen1$cohen.kappa, display_numbers = T)
pheatmap(cohen2$cohen.kappa, display_numbers = T)
pheatmap(cohen3$cohen.kappa, display_numbers = T)
pheatmap(cohen4$cohen.kappa, display_numbers = T)
pheatmap(cohen1$cohen.kappa, display_numbers = T)
data = read.csv("data/datafinal.csv")
summary(lm(HB ~ Hb.mass.kg..g...kg., data = data))
data_rinconada = data[data$Ville_eval == "Rinconada"]
View(data)
data_rinconada = data[data$Ville_eval == "Rinconada",]
summary(lm(HB ~ Hb.mass.kg..g...kg., data = data_rinconada))
View(data_rinconada)
summary(lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg., data = data_rinconada))
summary(lm(HB ~ PV..kg..ml.kg., data = data_rinconada))
summary(lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg., data = data_rinconada))
df_moyennes <- data %>%
group_by(Altitude) %>%
summarise(
HB = mean(HB, na.rm = TRUE),
Hbmass = mean(Hb.mass.kg..g...kg., na.rm = TRUE),
PV = mean(PV..kg..ml.kg., na.rm = TRUE),
.groups = "drop"
) %>%
tidyr::pivot_longer(cols = c(HB, Hbmass), names_to = "Mesure", values_to = "Valeur")
ggplot(df_moyennes, aes(x = Altitude, y = Valeur, color = Mesure, group = Mesure)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
labs(title = "Évolution de HB et Hbmass selon l'altitude", y = "Valeur moyenne")
df_moyennes <- data %>%
group_by(Altitude) %>%
summarise(
HB = mean(HB, na.rm = TRUE),
Hbmass = mean(Hb.mass.kg..g...kg., na.rm = TRUE),
PV = mean(PV..kg..ml.kg., na.rm = TRUE),
.groups = "drop"
) %>%
tidyr::pivot_longer(cols = c(HB, Hbmass, PV), names_to = "Mesure", values_to = "Valeur")
ggplot(df_moyennes, aes(x = Altitude, y = Valeur, color = Mesure, group = Mesure)) +
geom_line(linewidth = 1.2) +
geom_point(size = 2) +
labs(title = "Évolution de HB et Hbmass selon l'altitude", y = "Valeur moyenne")
diag = read.csv("data/diags.csv")
nutri = read.csv("data/nutri.csv")
diag = diag[,-c(1,3)]
data = left_join(diag, nutri, by = c("Code_Sujet", "Age_mois", "Age_categorie_binaire"))
data <- data[data$Age_categorie_binaire == "0-3 ans",]
data <- data[, !grepl("Hbmass", names(data), ignore.case = TRUE)]
View(nutri)
diag = read.csv("data/diags.csv")
nutri = read.csv("data/nutri.csv")
diag = diag[,-c(1,3)]
data = left_join(diag, nutri, by = c("Code_Sujet", "Age_mois", "Age_categorie_binaire"))
data <- data[data$Age_categorie_binaire == "8-12 ans",]
data_long <- data %>%
pivot_longer(
cols = starts_with("Anemie_") | starts_with("Polyglobulie_"),
names_to = "Diagnostic",
values_to = "Valeur"  # oui / non / NA
) %>%
filter(!is.na(Valeur))  # tu peux choisir de garder ou non les NA
View(data_long)
View(data_long)
library(dplyr)
library(tidyr)
library(modelsummary)
library(glue)
library(gt)
library(car)
library(dunn.test)
library(rcompanion)
library(rstatix)
library(purrr)
library(ggplot2)
library(patchwork)
library(psych)
library(performance)
library(lmtest)
library(readxl)
library(openxlsx)
library(pheatmap)
data = read.csv("data/datafinal.csv")
ggplot(data = data, aes(x = Hb.mass.kg..g...kg., y = HB, color = Altitude)) +
geom_point()
library(dplyr)
library(tidyr)
library(modelsummary)
library(glue)
library(gt)
library(car)
library(dunn.test)
library(rcompanion)
library(rstatix)
library(purrr)
library(ggplot2)
library(patchwork)
library(psych)
library(performance)
library(lmtest)
library(readxl)
library(openxlsx)
library(pheatmap)
data = read.csv("data/datafinal.csv")
ggplot(data = data, aes(x = Hb.mass.kg..g...kg., y = HB, color = Altitude)) +
geom_point()
mod = lm(HB ~ Hb.mass.kg..g...kg. + Altitude + Hb.mass.kg..g...kg. * Altitude, data = data)
summary(mod)
check_heteroskedasticity(mod)
check_normality(mod)
check_autocorrelation(mod)
check_outliers(mod)
mod = lm(HB ~ Hb.mass.kg..g...kg. + Altitude + Hb.mass.kg..g...kg. * Altitude, data = data)
summary(mod)
check_heteroskedasticity(mod)
check_normality(mod)
check_autocorrelation(mod)
check_outliers(mod)
mod = lm(HB ~ Hb.mass.kg..g...kg. + PV, data = data)
mod = lm(HB ~ Hb.mass.kg..g...kg. + PV.ml., data = data)
summary(mod)
check_heteroskedasticity(mod)
check_normality(mod)
check_autocorrelation(mod)
check_outliers(mod)
mod = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. , data = data)
summary(mod)
check_heteroskedasticity(mod)
check_normality(mod)
check_autocorrelation(mod)
check_outliers(mod)
mod = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. , data = data)
summary(mod)
summary(lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg., data = data_rinconada))
library(coefplot)
install.packages("coefplot")
library(coefplot)
mod1 = lm(HB ~ Hb.mass.kg..g...kg., data = data)
mod2 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. , data = data)
mod3 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. + Altitude, data = data)
mod4 = lm(HB ~ Hb.mass.kg..g...kg. * Altitude + PV..kg..ml.kg. * Altitude, data = data)
coefplot(mod1, col = "blue")
coefplot(mod2, col = "red", add = TRUE)
coefplot(mod3, col = "green", add = TRUE)
coefplot(mod4, col = "purple", add = TRUE)
legend("topright", legend = c("Modèle 1", "Modèle 2", "Modèle 3", "Modèle 4"), col = c("blue", "red", "green", "purple"), lwd = 2)
mod1 = lm(HB ~ Hb.mass.kg..g...kg., data = data)
mod2 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. , data = data)
mod3 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. + Altitude, data = data)
mod4 = lm(HB ~ Hb.mass.kg..g...kg. * Altitude + PV..kg..ml.kg. * Altitude, data = data)
coefplot(mod1, col = "blue")
coefplot(mod2, col = "red", add = TRUE)
coefplot(mod3, col = "green", add = TRUE)
legend("topright", legend = c("Modèle 1", "Modèle 2", "Modèle 3", "Modèle 4"), col = c("blue", "red", "green", "purple"), lwd = 2)
mod1 = lm(HB ~ Hb.mass.kg..g...kg., data = data)
mod2 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. , data = data)
mod3 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. + Altitude, data = data)
mod4 = lm(HB ~ Hb.mass.kg..g...kg. * Altitude + PV..kg..ml.kg. * Altitude, data = data)
coefplot(mod1, col = "blue", new = TRUE)
library(sjPlot)
plot_models(mod1, mod2,
title = "Comparaison des coefficients",
legend.title = "Modèle",
show.p = TRUE,  # Affiche les niveaux de significativité
show.values = TRUE,
value.offset = .3,
vline.color = "gray")  # Ligne à 0
mod1 = lm(HB ~ Hb.mass.kg..g...kg., data = data)
mod2 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. , data = data)
mod3 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. + Altitude, data = data)
mod4 = lm(HB ~ Hb.mass.kg..g...kg. * Altitude + PV..kg..ml.kg. * Altitude, data = data)
plot_models(mod1, mod2,
title = "Comparaison des coefficients",
legend.title = "Modèle",
show.p = TRUE,  # Affiche les niveaux de significativité
show.values = TRUE,
value.offset = .3,
vline.color = "gray")  # Ligne à 0
install.packages("sjPlot")
install.packages("sjPlot")
library(sjPlot)
plot_models(mod1, mod2,
title = "Comparaison des coefficients",
legend.title = "Modèle",
show.p = TRUE,  # Affiche les niveaux de significativité
show.values = TRUE,
value.offset = .3,
vline.color = "gray")  # Ligne à 0
plot_models(mod1,
title = "Comparaison des coefficients",
legend.title = "Modèle",
show.p = TRUE,  # Affiche les niveaux de significativité
show.values = TRUE,
value.offset = .3,
vline.color = "gray")  # Ligne à 0
plot_models(mod1,
title = "Comparaison des coefficients",
legend.title = "Modèle",
show.p = TRUE,  # Affiche les niveaux de significativité
show.values = TRUE,
value.offset = .3,
vline.color = "gray")  # Ligne à 0
plot_models(mod1, mod2)
plot_models(mod1, mod2,
title = "Comparaison des coefficients",
legend.title = "Modèle",
show.p = TRUE,  # Affiche les niveaux de significativité
show.values = TRUE,
value.offset = .3,
vline.color = "gray")  # Ligne à 0
library(dplyr)
library(tidyr)
library(modelsummary)
library(glue)
library(gt)
library(car)
library(dunn.test)
library(rcompanion)
library(rstatix)
library(purrr)
library(ggplot2)
library(patchwork)
library(psych)
library(performance)
library(lmtest)
library(readxl)
library(openxlsx)
library(pheatmap)
library(coefplot)
library(dplyr)
library(tidyr)
library(modelsummary)
library(glue)
library(gt)
library(car)
library(dunn.test)
library(rcompanion)
library(rstatix)
library(purrr)
library(ggplot2)
library(patchwork)
library(psych)
library(performance)
library(lmtest)
library(readxl)
library(openxlsx)
library(pheatmap)
library(coefplot)
library(dplyr)
library(tidyr)
library(modelsummary)
library(glue)
library(gt)
library(car)
library(dunn.test)
library(rcompanion)
library(rstatix)
library(purrr)
library(ggplot2)
library(patchwork)
library(psych)
library(performance)
library(lmtest)
library(readxl)
library(openxlsx)
library(pheatmap)
library(sjPlot)
data = read.csv("data/datafinal.csv")
mod1 = lm(HB ~ Hb.mass.kg..g...kg., data = data)
mod2 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. , data = data)
mod3 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. + Altitude, data = data)
mod4 = lm(HB ~ Hb.mass.kg..g...kg. * Altitude + PV..kg..ml.kg. * Altitude, data = data)
plot_models(mod1, mod2,
title = "Comparaison des coefficients",
legend.title = "Modèle",
show.p = TRUE,  # Affiche les niveaux de significativité
show.values = TRUE,
value.offset = .3,
vline.color = "gray")  # Ligne à 0
plot_models(mod1, mod2)
mod1 = lm(HB ~ Hb.mass.kg..g...kg., data = data)
mod2 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. , data = data)
mod3 = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. + Altitude, data = data)
mod4 = lm(HB ~ Hb.mass.kg..g...kg. * Altitude + PV..kg..ml.kg. * Altitude, data = data)
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
mod = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. + Sexe_F_Fille_G_Garçon, data = data)
summary(mod)
mod = lm(HB ~ Hb.mass.kg..g...kg. + PV..kg..ml.kg. + Sexe_F_Fille_G_Garçon, data = data)
models = list(mod1, mod2, mod, mod3, mod4)
modelsummary(models)
?step
library(dplyr)
library(tidyr)
library(modelsummary)
library(glue)
library(gt)
library(car)
library(dunn.test)
library(rcompanion)
library(rstatix)
library(purrr)
library(ggplot2)
library(patchwork)
library(psych)
library(performance)
library(lmtest)
library(readxl)
library(openxlsx)
library(pheatmap)
library(sjPlot)
library(stats)
full = lm(HB ~ ., data = data)
full = lm(HB ~ ., data = data[,-c(1, 2, 3, 7, 8, 9)])
full = lm(HB ~ ., data = data[, !(sapply(vars, is.factor) & sapply(vars, nlevels) < 2)])
vars <- data[ , -c(1, 2, 3, 7, 8, 9)]
vars_clean <- vars[, !(sapply(vars, is.factor) & sapply(vars, nlevels) < 2)]
full = lm(HB ~ ., data = vars_clean)
