out <- tuk
}
} else {
# Kruskal-Wallis
kw <- kruskal_test(tmp, Valeur ~ Ville_eval)
if (kw$p < 0.05) {
dunn <- dunn_test(tmp, Valeur ~ Ville_eval, p.adjust.method = "BH")
out <- dunn %>%
mutate(sig = ifelse(p.adj < 0.05, "*", "")) %>%
select(comparison, sig)
}
}
}
out$comparison <- str_replace_all(out$comparison, c(
"Lima \\(150m\\)"       = "L",
"Cusco \\(3400m\\)"     = "C",
"Juliaca \\(3800m\\)"   = "J",
"La Rinconada \\(5100m\\)" = "R"
))
out
}) %>%
group_by(Variable) %>%
summarise(Comparaisons = paste0(comparison[sig=="*"], collapse = "; "), .groups="drop") %>%
mutate(Comparaisons = ifelse(Comparaisons == "", "", paste0("Signif: ", Comparaisons)))
# ğŸ”¹ Fusion avec tableau descriptif
res_age <- left_join(res_age, signif_res, by = "Variable")
# Flextable
ft <- flextable(res_age)
ft <- add_header_row(
ft,
values = c("", rep(age_selected, length(villes)), ""),
colwidths = c(1, rep(1, length(villes)), 1)
)
header_labels <- setNames(c("Variable", villes, "Comparaisons significatives"), names(res_age))
ft <- set_header_labels(ft, .labels = header_labels)
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "header")
ft <- bold(ft, part = "header")
ft <- autofit(ft)
ft <- fontsize(ft, size = 10, part = "all")
ft <- valign(ft, valign = "center", part = "all")
return(ft)
}
# 2) GÃ©nÃ©rer les deux tableaux
ft_0_3 <- make_table_by_age("0-3 ans")
data_all <- read.csv("datafinalfinal.csv")
# --------- PARAMÃˆTRES ----------
ages   <- c("0-3 ans", "8-12 ans")
villes <- c("Lima (150m)", "Cusco (3400m)", "Juliaca (3800m)", "La Rinconada (5100m)")
vars_num <- c(
"kCalHors.fibres",
"Pr..g.",
"L.g.",
"G.g.",
"Fibres",
"Calcium..mg.",
"Fer..mg.100.g.",
"Zinc..mg.100.g.",
"Vitamine.C..mg.",
"X..ENERGIE.RNP",
"X..CALCIUM...RNP",
"X..vit.C...RNP"
)
# --------------------------------
data_all$Age_categorie_binaire <- factor(data_all$Age_categorie_binaire, levels = ages)
data_all$Ville_eval <- factor(data_all$Ville_eval, levels = villes)
# 1) Fonction pour crÃ©er un tableau avec en-tÃªte Ã  2 lignes
make_table_by_age <- function(age_selected) {
res_age <- data_all %>%
filter(Age_categorie_binaire == age_selected) %>%
select(Ville_eval, all_of(vars_num)) %>%
pivot_longer(cols = all_of(vars_num), names_to = "Variable", values_to = "Valeur") %>%
group_by(Variable, Ville_eval) %>%
summarise(
n = sum(!is.na(Valeur)),
mean = mean(Valeur, na.rm = TRUE),
sd   = sd(Valeur, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
MeanSD = ifelse(n > 0,
sprintf("%.2f \u00B1 %.2f (n=%d)", mean, sd, n),
"NA")
) %>%
select(Variable, Ville_eval, MeanSD) %>%
pivot_wider(names_from = Ville_eval, values_from = MeanSD) %>%
mutate(across(-Variable, ~replace_na(.x, "")))
# ğŸ”¹ Tests statistiques par variable
signif_res <- data_all %>%
filter(Age_categorie_binaire == age_selected) %>%
select(Ville_eval, all_of(vars_num)) %>%
pivot_longer(cols = all_of(vars_num), names_to = "Variable", values_to = "Valeur") %>%
group_by(Variable) %>%
do({
tmp <- .
counts <- tmp %>% group_by(Ville_eval) %>% summarise(n = sum(!is.na(Valeur)))
counts_nonzero <- counts %>% filter(n > 0)
# valeur par dÃ©faut
out <- tibble(comparison = NA, sig = "")
if (nrow(counts_nonzero) >= 2) {
use_anova <- any(counts_nonzero$n > 30)
if (use_anova) {
# ANOVA
aov_model <- aov(Valeur ~ Ville_eval, data = tmp)
p_global <- summary(aov_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_global) && p_global < 0.05) {
tuk <- TukeyHSD(aov_model)$Ville_eval %>%
as.data.frame() %>%
tibble::rownames_to_column("comparison") %>%
mutate(sig = ifelse(`p adj` < 0.05, "*", "")) %>%
select(comparison, sig)
out <- tuk
}
} else {
# Kruskal-Wallis
kw <- kruskal_test(tmp, Valeur ~ Ville_eval)
if (kw$p < 0.05) {
dunn <- dunn_test(tmp, Valeur ~ Ville_eval, p.adjust.method = "BH")
out <- dunn %>%
mutate(sig = ifelse(p.adj < 0.05, "*", "")) %>%
select(comparison, sig)
}
}
}
out$comparison <- str_replace_all(out$comparison, c(
"Lima \\(150m\\)"       = "L",
"Cusco \\(3400m\\)"     = "C",
"Juliaca \\(3800m\\)"   = "J",
"La Rinconada \\(5100m\\)" = "R"
))
out
}) %>%
group_by(Variable) %>%
summarise(Comparaisons = paste0(comparison[sig=="*"], collapse = "; "), .groups="drop") %>%
mutate(Comparaisons = ifelse(Comparaisons == "", "", paste0("Signif: ", Comparaisons)))
# ğŸ”¹ Fusion avec tableau descriptif
res_age <- left_join(res_age, signif_res, by = "Variable")
# Flextable
ft <- flextable(res_age)
ft <- add_header_row(
ft,
values = c("", rep(age_selected, length(villes)), ""),
colwidths = c(1, rep(1, length(villes)), 1)
)
header_labels <- setNames(c("Variable", villes, "Comparaisons significatives"), names(res_age))
ft <- set_header_labels(ft, .labels = header_labels)
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "header")
ft <- bold(ft, part = "header")
ft <- autofit(ft)
ft <- fontsize(ft, size = 10, part = "all")
ft <- valign(ft, valign = "center", part = "all")
return(ft)
}
# 2) GÃ©nÃ©rer les deux tableaux
ft_0_3 <- make_table_by_age("0-3 ans")
ft_8_12 <- make_table_by_age("8-12 ans")
# 3) Export PowerPoint avec 2 slides
ppt <- read_pptx()
ppt <- add_slide(ppt, layout = "Title and Content", master = "Office Theme")
ppt <- ph_with(ppt, value = ft_0_3, location = ph_location_type(type = "body"))
ppt <- add_slide(ppt, layout = "Title and Content", master = "Office Theme")
ppt <- ph_with(ppt, value = ft_8_12, location = ph_location_type(type = "body"))
print(ppt, target = "tableau_par_age_separe.pptx")
data_all <- read.csv("datafinalfinal.csv")
# --------- PARAMÃˆTRES ----------
ages   <- c("0-3 ans", "8-12 ans")
villes <- c("Lima (150m)", "Cusco (3400m)", "Juliaca (3800m)", "La Rinconada (5100m)")
vars_num <- c(
"Body.iron",
"CRP..mg.L.",
"ERFE..ng.mL.",
"FER..micromol.L.",
"FERRITINE..microg.L.",
"RECEPTEUR.TRANSFERINE..mg.L.",
"TRANSFERINE..g.L.",
"Vit.B12",
"Vit.B9"
)
# --------------------------------
data_all$Age_categorie_binaire <- factor(data_all$Age_categorie_binaire, levels = ages)
data_all$Ville_eval <- factor(data_all$Ville_eval, levels = villes)
# 1) Fonction pour crÃ©er un tableau avec en-tÃªte Ã  2 lignes
make_table_by_age <- function(age_selected) {
res_age <- data_all %>%
filter(Age_categorie_binaire == age_selected) %>%
select(Ville_eval, all_of(vars_num)) %>%
pivot_longer(cols = all_of(vars_num), names_to = "Variable", values_to = "Valeur") %>%
group_by(Variable, Ville_eval) %>%
summarise(
n = sum(!is.na(Valeur)),
mean = mean(Valeur, na.rm = TRUE),
sd   = sd(Valeur, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
MeanSD = ifelse(n > 0,
sprintf("%.2f \u00B1 %.2f (n=%d)", mean, sd, n),
"NA")
) %>%
select(Variable, Ville_eval, MeanSD) %>%
pivot_wider(names_from = Ville_eval, values_from = MeanSD) %>%
mutate(across(-Variable, ~replace_na(.x, "")))
# ğŸ”¹ Tests statistiques par variable
signif_res <- data_all %>%
filter(Age_categorie_binaire == age_selected) %>%
select(Ville_eval, all_of(vars_num)) %>%
pivot_longer(cols = all_of(vars_num), names_to = "Variable", values_to = "Valeur") %>%
group_by(Variable) %>%
do({
tmp <- .
counts <- tmp %>% group_by(Ville_eval) %>% summarise(n = sum(!is.na(Valeur)))
counts_nonzero <- counts %>% filter(n > 0)
# valeur par dÃ©faut
out <- tibble(comparison = NA, sig = "")
if (nrow(counts_nonzero) >= 2) {
use_anova <- any(counts_nonzero$n > 30)
if (use_anova) {
# ANOVA
aov_model <- aov(Valeur ~ Ville_eval, data = tmp)
p_global <- summary(aov_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_global) && p_global < 0.05) {
tuk <- TukeyHSD(aov_model)$Ville_eval %>%
as.data.frame() %>%
tibble::rownames_to_column("comparison") %>%
mutate(sig = ifelse(`p adj` < 0.05, "*", "")) %>%
select(comparison, sig)
out <- tuk
}
} else {
# Kruskal-Wallis
kw <- kruskal_test(tmp, Valeur ~ Ville_eval)
if (kw$p < 0.05) {
dunn <- dunn_test(tmp, Valeur ~ Ville_eval, p.adjust.method = "BH")
out <- dunn %>%
mutate(sig = ifelse(p.adj < 0.05, "*", "")) %>%
select(comparison, sig)
}
}
}
out$comparison <- str_replace_all(out$comparison, c(
"Lima \\(150m\\)"       = "L",
"Cusco \\(3400m\\)"     = "C",
"Juliaca \\(3800m\\)"   = "J",
"La Rinconada \\(5100m\\)" = "R"
))
out
}) %>%
group_by(Variable) %>%
summarise(Comparaisons = paste0(comparison[sig=="*"], collapse = "; "), .groups="drop") %>%
mutate(Comparaisons = ifelse(Comparaisons == "", "", paste0("Signif: ", Comparaisons)))
# ğŸ”¹ Fusion avec tableau descriptif
res_age <- left_join(res_age, signif_res, by = "Variable")
# Flextable
ft <- flextable(res_age)
ft <- add_header_row(
ft,
values = c("", rep(age_selected, length(villes)), ""),
colwidths = c(1, rep(1, length(villes)), 1)
)
header_labels <- setNames(c("Variable", villes, "Comparaisons significatives"), names(res_age))
ft <- set_header_labels(ft, .labels = header_labels)
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "header")
ft <- bold(ft, part = "header")
ft <- autofit(ft)
ft <- fontsize(ft, size = 10, part = "all")
ft <- valign(ft, valign = "center", part = "all")
return(ft)
}
# 2) GÃ©nÃ©rer les deux tableaux
ft_0_3 <- make_table_by_age("0-3 ans")
rlang::last_trace()
data_all <- read.csv("datafinalfinal.csv")
data_all$Body.iron
data_all <- read.csv("datafinalfinal.csv")
# --------- PARAMÃˆTRES ----------
ages   <- c("0-3 ans", "8-12 ans")
villes <- c("Lima (150m)", "Cusco (3400m)", "Juliaca (3800m)", "La Rinconada (5100m)")
vars_num <- c(
"Body.iron",
"CRP..mg.L.",
"ERFE..ng.mL.",
"FER..micromol.L.",
"FERRITINE..microg.L.",
"RECEPTEUR.TRANSFERINE..mg.L.",
"TRANSFERINE..g.L.",
"Vit.B12",
"Vit.B9"
)
# --------------------------------
data_all$Age_categorie_binaire <- factor(data_all$Age_categorie_binaire, levels = ages)
data_all$Ville_eval <- factor(data_all$Ville_eval, levels = villes)
# 1) Fonction pour crÃ©er un tableau avec en-tÃªte Ã  2 lignes
make_table_by_age <- function(age_selected) {
res_age <- data_all %>%
filter(Age_categorie_binaire == age_selected) %>%
select(Ville_eval, all_of(vars_num)) %>%
pivot_longer(cols = all_of(vars_num), names_to = "Variable", values_to = "Valeur") %>%
group_by(Variable, Ville_eval) %>%
summarise(
n = sum(!is.na(Valeur)),
mean = mean(Valeur, na.rm = TRUE),
sd   = sd(Valeur, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
MeanSD = ifelse(n > 0,
sprintf("%.2f \u00B1 %.2f (n=%d)", mean, sd, n),
"NA")
) %>%
select(Variable, Ville_eval, MeanSD) %>%
pivot_wider(names_from = Ville_eval, values_from = MeanSD) %>%
mutate(across(-Variable, ~replace_na(.x, "")))
# ğŸ”¹ Tests statistiques par variable
signif_res <- data_all %>%
filter(Age_categorie_binaire == age_selected) %>%
select(Ville_eval, all_of(vars_num)) %>%
pivot_longer(cols = all_of(vars_num), names_to = "Variable", values_to = "Valeur") %>%
group_by(Variable) %>%
do({
tmp <- .
counts <- tmp %>% group_by(Ville_eval) %>% summarise(n = sum(!is.na(Valeur)))
counts_nonzero <- counts %>% filter(n > 0)
# valeur par dÃ©faut
out <- tibble(comparison = NA, sig = "")
if (nrow(counts_nonzero) >= 2) {
use_anova <- any(counts_nonzero$n > 30)
if (use_anova) {
# ANOVA
aov_model <- aov(Valeur ~ Ville_eval, data = tmp)
p_global <- summary(aov_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_global) && p_global < 0.05) {
tuk <- TukeyHSD(aov_model)$Ville_eval %>%
as.data.frame() %>%
tibble::rownames_to_column("comparison") %>%
mutate(sig = ifelse(`p adj` < 0.05, "*", "")) %>%
select(comparison, sig)
out <- tuk
}
} else {
# Kruskal-Wallis
kw <- kruskal_test(tmp, Valeur ~ Ville_eval)
if (kw$p < 0.05) {
dunn <- dunn_test(tmp, Valeur ~ Ville_eval, p.adjust.method = "BH")
out <- dunn %>%
mutate(sig = ifelse(p.adj < 0.05, "*", "")) %>%
select(comparison, sig)
}
}
}
out$comparison <- str_replace_all(out$comparison, c(
"Lima \\(150m\\)"       = "L",
"Cusco \\(3400m\\)"     = "C",
"Juliaca \\(3800m\\)"   = "J",
"La Rinconada \\(5100m\\)" = "R"
))
out
}) %>%
group_by(Variable) %>%
summarise(Comparaisons = paste0(comparison[sig=="*"], collapse = "; "), .groups="drop") %>%
mutate(Comparaisons = ifelse(Comparaisons == "", "", paste0("Signif: ", Comparaisons)))
# ğŸ”¹ Fusion avec tableau descriptif
res_age <- left_join(res_age, signif_res, by = "Variable")
# Flextable
ft <- flextable(res_age)
ft <- add_header_row(
ft,
values = c("", rep(age_selected, length(villes)), ""),
colwidths = c(1, rep(1, length(villes)), 1)
)
header_labels <- setNames(c("Variable", villes, "Comparaisons significatives"), names(res_age))
ft <- set_header_labels(ft, .labels = header_labels)
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "header")
ft <- bold(ft, part = "header")
ft <- autofit(ft)
ft <- fontsize(ft, size = 10, part = "all")
ft <- valign(ft, valign = "center", part = "all")
return(ft)
}
# 2) GÃ©nÃ©rer les deux tableaux
ft_0_3 <- make_table_by_age("0-3 ans")
rlang::last_trace()
data_all <- read.csv("datafinalfinal.csv")
# --------- PARAMÃˆTRES ----------
ages   <- c("0-3 ans", "8-12 ans")
villes <- c("Lima (150m)", "Cusco (3400m)", "Juliaca (3800m)", "La Rinconada (5100m)")
vars_num <- c(
"Body.iron",
"CRP..mg.L.",
"ERFE..ng.mL.",
"FER..micromol.L.",
"FERRITINE..microg.L.",
"RECEPTEUR.TRANSFERINE..mg.L.",
"TRANSFERINE..g.L.",
"Vit.B12",
"Vit.B9"
)
# --------------------------------
data_all$Age_categorie_binaire <- factor(data_all$Age_categorie_binaire, levels = ages)
data_all$Ville_eval <- factor(data_all$Ville_eval, levels = villes)
# 1) Fonction pour crÃ©er un tableau avec en-tÃªte Ã  2 lignes
make_table_by_age <- function(age_selected) {
res_age <- data_all %>%
filter(Age_categorie_binaire == age_selected) %>%
select(Ville_eval, all_of(vars_num)) %>%
pivot_longer(cols = all_of(vars_num), names_to = "Variable", values_to = "Valeur") %>%
group_by(Variable, Ville_eval) %>%
summarise(
n = sum(!is.na(Valeur)),
mean = mean(Valeur, na.rm = TRUE),
sd   = sd(Valeur, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
MeanSD = ifelse(n > 0,
sprintf("%.2f \u00B1 %.2f (n=%d)", mean, sd, n),
"NA")
) %>%
select(Variable, Ville_eval, MeanSD) %>%
pivot_wider(names_from = Ville_eval, values_from = MeanSD) %>%
mutate(across(-Variable, ~replace_na(.x, "")))
# ğŸ”¹ Tests statistiques par variable
signif_res <- data_all %>%
filter(Age_categorie_binaire == age_selected) %>%
select(Ville_eval, all_of(vars_num)) %>%
pivot_longer(cols = all_of(vars_num), names_to = "Variable", values_to = "Valeur") %>%
group_by(Variable) %>%
do({
tmp <- .
counts <- tmp %>% group_by(Ville_eval) %>% summarise(n = sum(!is.na(Valeur)))
counts_nonzero <- counts %>% filter(n > 0)
# valeur par dÃ©faut
out <- tibble(comparison = NA, sig = "")
if (nrow(counts_nonzero) >= 2) {
use_anova <- any(counts_nonzero$n > 30)
if (use_anova) {
# ANOVA
aov_model <- aov(Valeur ~ Ville_eval, data = tmp)
p_global <- summary(aov_model)[[1]][["Pr(>F)"]][1]
if (!is.na(p_global) && p_global < 0.05) {
tuk <- TukeyHSD(aov_model)$Ville_eval %>%
as.data.frame() %>%
tibble::rownames_to_column("comparison") %>%
mutate(sig = ifelse(`p adj` < 0.05, "*", "")) %>%
select(comparison, sig)
out <- tuk
}
} else {
# Kruskal-Wallis
kw <- kruskal_test(tmp, Valeur ~ Ville_eval)
if (kw$p < 0.05) {
dunn <- dunn_test(tmp, Valeur ~ Ville_eval, p.adjust.method = "holm")
out <- dunn %>%
mutate(
comparison = paste(group1, group2, sep = "-"),
sig = case_when(
p.adj < 0.001 ~ "***",
p.adj < 0.01  ~ "**",
p.adj < 0.05  ~ "*",
TRUE ~ ""
)
) %>%
select(comparison, sig)
}
}
}
out$comparison <- str_replace_all(out$comparison, c(
"Lima \\(150m\\)"       = "L",
"Cusco \\(3400m\\)"     = "C",
"Juliaca \\(3800m\\)"   = "J",
"La Rinconada \\(5100m\\)" = "R"
))
out
}) %>%
group_by(Variable) %>%
summarise(Comparaisons = paste0(comparison[sig=="*"], collapse = "; "), .groups="drop") %>%
mutate(Comparaisons = ifelse(Comparaisons == "", "", paste0("Signif: ", Comparaisons)))
# ğŸ”¹ Fusion avec tableau descriptif
res_age <- left_join(res_age, signif_res, by = "Variable")
# Flextable
ft <- flextable(res_age)
ft <- add_header_row(
ft,
values = c("", rep(age_selected, length(villes)), ""),
colwidths = c(1, rep(1, length(villes)), 1)
)
header_labels <- setNames(c("Variable", villes, "Comparaisons significatives"), names(res_age))
ft <- set_header_labels(ft, .labels = header_labels)
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "header")
ft <- bold(ft, part = "header")
ft <- autofit(ft)
ft <- fontsize(ft, size = 10, part = "all")
ft <- valign(ft, valign = "center", part = "all")
return(ft)
}
# 2) GÃ©nÃ©rer les deux tableaux
ft_0_3 <- make_table_by_age("0-3 ans")
ft_8_12 <- make_table_by_age("8-12 ans")
# 3) Export PowerPoint avec 2 slides
ppt <- read_pptx()
ppt <- add_slide(ppt, layout = "Title and Content", master = "Office Theme")
ppt <- ph_with(ppt, value = ft_0_3, location = ph_location_type(type = "body"))
ppt <- add_slide(ppt, layout = "Title and Content", master = "Office Theme")
ppt <- ph_with(ppt, value = ft_8_12, location = ph_location_type(type = "body"))
print(ppt, target = "tableau_par_age_separe.pptx")
data_all
data = read.csv("datafinalfinal.csv")
library(openxlsx)
write.xlsx(data, "data.xlsx")
